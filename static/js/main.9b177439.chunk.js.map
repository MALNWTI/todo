{"version":3,"sources":["Components/ToDoitems/ToDoitem.js","Components/InputDescription/InputDescription.js","Components/confirmed/confirmed.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","className","type","defaultChecked","completed","onChange","ListChange","descriptionStyle","description","onClick","deleteDescription","InputDescription","value","placeholder","Confirmed","styles","ClickOk","ClickNo","App","useState","deletindex","setDeleteindex","visible","setVisible","setValue","localStorageKey","localStorage","clear","getItem","todos","setTodos","React","useEffect","setItem","useStateWithLocalStorage","activeTasks","filter","task","completedTasks","finalTasks","map","item","key","id","newtodos","i","index","indexOf","splice","event","target","push","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b177439.chunk.js","sourcesContent":["import React from 'react';\nimport './ToDoitem.scss';\n\nconst ToDoItem = props => {\n\n    return(\n        <div className='todo-item'>\n           <div className='wrap-input'>\n                <input\n                    className = \"input-checkbox\" \n                    type = 'checkbox' \n                    defaultChecked = {props.completed}\n                    onChange = {props.ListChange}\n                />\n            </div>\n            <div className='wrap-description'>\n                <p className = {props.descriptionStyle}> {props.description} </p>\n            </div>\n            <div className='wrap-delete'>\n                <button className='close' onClick={props.deleteDescription}></button>\n            </div>\n        </div>\n    )\n}\n\nexport default ToDoItem;","import React from 'react';\nimport './InputDescription.scss';\n\nconst InputDescription = props => {\n\n    return(\n        <div className=\"InputDescription\">\n            <textarea \n                value={props.value}\n                onChange={props.onChange}\n                className='text-input' \n                placeholder='Нова нотатка'>\n            </textarea>\n            <button onClick={props.onClick}>Add</button>\n        </div>\n    )\n}\n\nexport default InputDescription;","import React from 'react';\nimport './confirmed.scss';\n\nconst Confirmed = props => {\n    \n    return(\n        <div className={props.styles}>\n            <button onClick={props.ClickOk}>\n                Yes\n            </button>\n            <button onClick={props.ClickNo}>\n                No\n            </button>\n        </div>\n    )\n}\n\nexport default Confirmed;\n","import React, {useState} from 'react';\nimport './App.scss';\nimport ToDoItem from './Components/ToDoitems/ToDoitem.js';\nimport InputDescription from './Components/InputDescription/InputDescription.js'\nimport Confirmed from './Components/confirmed/confirmed.js';\n\nconst useStateWithLocalStorage = localStorageKey => {\n    localStorage.clear();\n    const arr = [{'id': 0, 'description': 'Взяти цього хлопаку на роботу', 'completed': false}];\n    const [todos, setTodos] = useState(localStorage.getItem(localStorageKey) || arr);\n    React.useEffect(() => {\n        localStorage.setItem(localStorageKey,  todos)\n        // eslint-disable-next-line\n    }, [todos]);\n    return [todos, setTodos];\n};\n\nconst App = () => {\n    const [deletindex, setDeleteindex] = useState('');\n    const [visible, setVisible] = useState(false);\n    const [value, setValue] = useState('');    \n    const [todos, setTodos] = useStateWithLocalStorage('myTodoLocalStoage');\n    const onChange = event => {\n        setValue(event.target.value);\n    }\n    const onClick = () =>{\n        if (value !== '') {        \n            let newtodos = todos.map(i =>{\n                return i;\n            });\n            newtodos.push({id:todos.length, description: value, completed:false});\n            setTodos(newtodos);   \n        }\n        setValue('');\n    }\n    const ListChange = id =>{\n        let newtodos = todos.map(i =>{\n            return i;\n        });\n        const index = newtodos.map(item => item.id).indexOf(id);\n        if(newtodos[index].completed === false){\n            newtodos[index].completed = true;\n        }\n        else{\n            newtodos[index].completed = false;\n        }         \n        setTodos(newtodos);\n    }\n\n    const tryDelete = (id) =>{\n        setDeleteindex(id);\n        if (visible === false) {\n            setVisible(true);\n        }\n    }\n\n    const ClickNo = () =>{\n        setVisible(false);\n    }\n\n    const deleteDescription = id =>{\n        setVisible(false);\n        let newtodos = todos.map(i =>{\n            return i;\n        });\n        const index = newtodos.map(item => item.id).indexOf(id);        \n        newtodos.splice(index, 1 );\n        setTodos(newtodos);\n    }\n\n    const activeTasks = todos.filter(task => task.completed === false)\n    const completedTasks = todos.filter(task => task.completed === true)\n\n    const finalTasks = [...activeTasks,...completedTasks].map(item => {\n        return(\n            <ToDoItem\n                key = {item.id}\n                description = {item.description}\n                completed = {item.completed}\n                descriptionStyle = {item.completed ? 'description disable': \"description active\"}\n                ListChange = {() => {ListChange(item.id)}}\n                deleteDescription = {() => {tryDelete(item.id)}}\n            />\n        )\n    })\n\n    return(\n        <div className=\"App\">\n            <Confirmed \n                styles = {visible ? 'confirmed-active' : 'confirmed-disable'}\n                ClickNo = {ClickNo}\n                ClickOk = {() => {deleteDescription(deletindex)}}   \n            />\n            <h1 className=\"Title\">ToDo List</h1>\n            <InputDescription\n                value = {value}\n                onChange = {onChange}\n                onClick = {onClick}\n            />\n            <div className=\"wrap-list\">\n                {finalTasks}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}